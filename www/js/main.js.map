{
  "version": 3,
  "sources": ["../../node_modules/mindrawingjs/build/mindrawing.min.js", "../../src/app.js", "../../src/cards.js", "../../src/lcg.js", "../../src/game.js"],
  "sourcesContent": ["Mindrawingjs=function(){},Mindrawingjs.prototype.setup=function(t,i,e){this.c=\"string\"==typeof t?document.getElementById(t):t,this.ctx=this.c.getContext(\"2d\"),3==arguments.length&&(this.c.width=i,this.c.height=e),this.width=this.c.width,this.height=this.c.height},Mindrawingjs.prototype.setCanvasSize=function(t,i){this.c.width=t,this.c.height=i,this.width=this.c.width,this.height=this.c.height},Mindrawingjs.prototype.background=function(t){this.ctx.fillStyle=t,this.ctx.fillRect(0,0,this.width,this.height)},Mindrawingjs.prototype.line=function(t,i,e,n){1==this.ctx.lineWidth&&(t+=.5,i+=.5,e+=.5,n+=.5),this.ctx.beginPath(),this.ctx.moveTo(t,i),this.ctx.lineTo(e,n),this.ctx.stroke()},Mindrawingjs.prototype.bezier=function(t,i,e,n,s,h,o,c){this.ctx.beginPath(),this.ctx.moveTo(t,i),this.ctx.bezierCurveTo(s,h,o,c,e,n),this.ctx.stroke()},Mindrawingjs.prototype.stroke=function(t){this.ctx.strokeStyle=t},Mindrawingjs.prototype.strokeWeight=function(t){this.ctx.lineWidth=t},Mindrawingjs.prototype.fill=function(t){this.ctx.fillStyle=t},Mindrawingjs.prototype.rect=function(t,i,e,n){this.ctx.beginPath(),this.ctx.rect(t,i,e,n),this.ctx.fill(),this.ctx.lineWidth&&this.ctx.stroke()},Mindrawingjs.prototype.rotatedRect=function(t,i,e,n,s,h,o){void 0===h&&(h=0),void 0===o&&(o=0),this.ctx.save(),this.ctx.translate(t,i),this.ctx.rotate(s),this.rect(-h,-o,e,n),this.ctx.restore()},Mindrawingjs.prototype.text=function(t,i,e){this.ctx.fillText(t,i,e)},Mindrawingjs.prototype.textSize=function(t){this.ctx.font=t+\"px Arial\"},Mindrawingjs.prototype.ellipse=function(t,i,e,n){3==arguments.length&&(n=e),this.ctx.beginPath(),this.ctx.ellipse(t,i,e/2,n/2,0,0,2*Math.PI),this.ctx.fill(),this.ctx.lineWidth&&this.ctx.stroke()},Mindrawingjs.prototype.getCtx=function(){return this.ctx},\"undefined\"!=typeof module&&module.exports&&(module.exports=Mindrawingjs);", "import Mindrawing from 'mindrawingjs'\nimport {Game} from './game'\n\nlet game = null\nlet d\n\nlet newGame = () => {\n  game = new Game(d)\n  let seedDiv = document.getElementById('seed')\n  seedDiv.innerHTML = `Seed: ${game.seed}`\n}\n\nlet undo = () => {\n  game.undo()\n}\n\nlet toScaled = _val => Math.round(_val * window.devicePixelRatio)\n\nlet main = () => {\n  console.log(window.devicePixelRatio)\n\n  let selectedCard = null\n  let selectOffset = {x:0, y:0}\n  let lastTouchPos = null\n  \n  let setup = () => {\n    d = new Mindrawing()\n    d.setup('myCanvas')\n    windowResize()\n\n    // d.c.addEventListener('click', mouseclickHandler, false)\n    d.c.addEventListener('mousedown', mousedownHandler, false)\n    d.c.addEventListener('mouseup', mouseupHandler, false)\n    d.c.addEventListener('mousemove', mousemoveHandler, false)\n    d.c.addEventListener('touchstart', touchdownHandler, false)\n    d.c.addEventListener('touchend', touchupHandler, false)\n    d.c.addEventListener('touchmove', touchmoveHandler, false)\n\n    document.getElementById(\"newgame\").addEventListener('click', newGame)\n    document.getElementById(\"undo\").addEventListener('click', undo)\n\n    newGame()\n  }\n  \n  let windowResize = () => {\n    let rect = d.c.parentNode.getBoundingClientRect()\n    d.setCanvasSize(rect.width * window.devicePixelRatio, rect.height * window.devicePixelRatio)\n  }\n  \n  let draw = () => {\n    d.background('black')\n    d.fill('white')\n\n    if (game !== null) {\n      game.draw(d)\n\n      let timeDiv = document.getElementById('time')\n      timeDiv.innerHTML = `Time: ${Math.floor((Date.now() - game.starttime) / 1000)}`\n    }\n\n    window.requestAnimationFrame(draw)\n  }\n  \n  // window.onresize = function(event) {\n  //   windowResize()\n  //   draw()\n  // }\n  \n  let tick = () => {\n    draw()\n  }\n  \n  let mouseclickHandler = e => {\n    console.log('mouse click')\n  }\n  \n  let mousedownHandler = e => {\n    console.log('MD', e.clientX, e.clientY)\n    if (game !== null) {\n      let card = game.getCard(e.clientX, e.clientY)\n      \n      if (card !== null) {\n        selectedCard = card\n        selectOffset.x = e.clientX - card.pos.x\n        selectOffset.y = e.clientY - card.pos.y\n      }\n    }\n  }\n  \n  let mouseupHandler = e => {\n    if (selectedCard !== null) {\n      console.log('mouse up')\n      game.moveCard(selectedCard, game.getStackFromMouse(e.clientX, e.clientY))\n      selectedCard = null\n      \n      let movesDiv = document.getElementById('moves')\n      movesDiv.innerHTML = `Moves: ${game.moves}`\n    }\n  }\n  \n  let mousemoveHandler = (e) => {\n    console.log('mouse move', e.clientX, e.clientY)\n    if (selectedCard !== null) {\n      selectedCard.pos.x = e.clientX - selectOffset.x\n      selectedCard.pos.y = e.clientY - selectOffset.y\n    }\n\n    // if (game !== null) {\n    //   console.log(game.getStackFromMouse(e.clientX, e.clientY))\n    // }\n  }\n  \n  let touchdownHandler = e => {\n    console.log('touch down')\n    lastTouchPos = {clientX: toScaled(e.touches[0].clientX), clientY: toScaled(e.touches[0].clientY)}\n    mousedownHandler(lastTouchPos)\n    e.preventDefault()\n  }\n  \n  let touchmoveHandler = e => {\n    console.log('touch move', e.touches)\n    lastTouchPos = {clientX: toScaled(e.touches[0].clientX), clientY: toScaled(e.touches[0].clientY)}\n    mousemoveHandler(lastTouchPos)\n    e.preventDefault()\n  }\n\n  let touchupHandler = e => {\n    mouseupHandler(lastTouchPos)\n    e.preventDefault()\n  }\n  \n  setup()\n  // setInterval(tick, 1000 / 60)\n\n  window.requestAnimationFrame(draw)\n}\n\nmain()\n", "// some default values in case doesn't get updated should be visible still\nexport const CARD_DIMS = {x: 10, y: 10, fontsize: 20}\nexport const CARD_X_MARGIN = 5\nexport const updateCardDims = _d => {\n  CARD_DIMS.x = (_d.width - CARD_X_MARGIN) / 8 - CARD_X_MARGIN\n  CARD_DIMS.y = CARD_DIMS.x * 1.4\n  CARD_DIMS.fontsize = Math.round(CARD_DIMS.x * 0.3)\n}\n\nexport class Card {\n  constructor(_suit, _num, _pos) {\n    if (!validateSuit(_suit)) {\n      console.log('invalid card suit')\n      _suit = 'NONE'\n    }\n\n    if (!validateNum(_num)) {\n      _num = 0\n    }\n\n    this.suit = _suit\n    if (this.suit == 'CLUBS' || this.suit == 'SPADES') this.color = 'black'\n    else this.color = 'red'\n\n    this.num = _num\n    if (_pos === undefined) this.pos = {x: 0, y: 0}\n    else this.pos = _pos\n\n    this.zindex = 0\n  }\n\n  draw(_d) {\n    _d.fill('white')\n    _d.stroke('black')\n    _d.strokeWeight(2)\n    _d.rect(this.pos.x, this.pos.y, CARD_DIMS.x, CARD_DIMS.y)\n\n    _d.fill(this.color)\n    _d.textSize(CARD_DIMS.fontsize)\n    _d.text(`${numToSymbol(this.num)} ${suitToSymbol(this.suit)}`, this.pos.x + 10, this.pos.y + Math.ceil(CARD_DIMS.fontsize * 1.2))\n  }\n}\n\nlet validateSuit = _suit => {\n  if (_suit === 'CLUBS') return true\n  if (_suit === 'HEARTS') return true\n  if (_suit === 'DIAMONDS') return true\n  if (_suit === 'SPADES') return true\n\n  return false\n}\n\nlet validateNum = _num => {\n  if (typeof(_num) === 'number') {\n    if (_num < 1) return false\n    if (_num > 13) return false\n    return true\n  }\n  \n  if(typeof(_num) === 'string') {\n    if (\n      _num === 'J' || \n      _num === 'j' || \n      _num === 'Q' || \n      _num === 'q' || \n      _num === 'K' || \n      _num === 'k' ||\n      _num === 'A' ||\n      _num === 'a'\n      ) return true\n    return false\n  }\n  \n  return false\n}\n\nlet numToSymbol = _num => {\n  if (typeof(_num) === 'number') {\n    if (_num === 0) return 'X'\n    if (_num === 1) return 'A'\n    if (_num === 11) return 'J'\n    if (_num === 12) return 'Q'\n    if (_num === 13) return 'K'\n    return _num\n  }\n  \n  if (typeof(_num) === 'string') {\n    return _num.toUpperCase()\n  }\n\n  return 'X'\n}\n\nlet suitToSymbol = _suit => {\n  if (_suit === 'CLUBS') return '\u2663\uFE0F'\n  if (_suit === 'HEARTS') return '\u2665\uFE0F'\n  if (_suit === 'DIAMONDS') return '\u2666\uFE0F'\n  if (_suit === 'SPADES') return '\u2660\uFE0F'\n\n  return 'X'\n}\n", "// MS Linear congruential generator\n\nexport class Lcg{\n  constructor(_seed) {\n    this.state = _seed\n  }\n\n  getNext() {\n    this.state = (214013 * this.state + 2531011) % 0x80000000\n    return this.state >> 16\n  }\n}\n", "import {Card, updateCardDims, CARD_X_MARGIN, CARD_DIMS} from './cards'\nimport {Lcg} from './lcg'\n\nexport class Game {\n  constructor(_d, _seed) {\n    this.cards = []\n    this.moves = 0\n    this.undos = 0\n    this.starttime = Date.now()\n    this.undoStack = []\n\n    this.d = _d\n\n    if (typeof(_seed) === 'number') this.seed = _seed\n    else this.seed = Math.floor(Math.random() * 32000) + 1 // use floor + 1 not ceil in case a 0\n\n    this.stacks = {\n      opencells: new Array(4).fill(null),\n      foundations: [[],[],[],[]],\n      table: [[],[],[],[],[],[],[],[]]\n      // this causes the tables to all be same table. BAD. \n      // table: new Array(8).fill([])\n    }\n\n    for (let i = 1; i <= 13; i++) {\n      this.cards.push(new Card('CLUBS', i, {x:_d.width * Math.random(), y:_d.height * Math.random()}))\n      this.cards.push(new Card('DIAMONDS', i, {x:_d.width * Math.random(), y:_d.height * Math.random()}))\n      this.cards.push(new Card('HEARTS', i, {x:_d.width * Math.random(), y:_d.height * Math.random()}))\n      this.cards.push(new Card('SPADES', i, {x:_d.width * Math.random(), y:_d.height * Math.random()}))\n    }\n\n    let tempcards = [...this.cards]\n    let count = 0;\n    let lcg = new Lcg(this.seed)\n    while (tempcards.length > 0) {\n      let i = lcg.getNext() % tempcards.length\n      let last = tempcards[tempcards.length - 1]\n      tempcards[tempcards.length - 1] = tempcards[i]\n      tempcards[i] = last\n      \n      this.stacks.table[count].push(tempcards.pop())\n      count++\n      if (count >= 8) count = 0\n    }\n\n    updateCardDims(_d)\n    this.alignCards()\n  }\n\n  draw(_d) {\n    updateCardDims(_d)\n\n    for (let i = 0; i < 8; i++) {\n      _d.stroke('white')\n      _d.fill('black')\n      _d.rect(CARD_X_MARGIN + i * (CARD_DIMS.x + CARD_X_MARGIN), 200, CARD_DIMS.x, CARD_DIMS.y)\n      _d.rect(CARD_X_MARGIN + i * (CARD_DIMS.x + CARD_X_MARGIN), 200 + 1.5 * CARD_DIMS.y, CARD_DIMS.x, CARD_DIMS.y)\n    }\n\n    this.cards.forEach(_card => {\n      _card.draw(_d)\n    })\n  }\n\n  getCard(_x, _y) {\n    for (let i = this.cards.length - 1; i >= 0; i--) {\n      if (\n        _x >= this.cards[i].pos.x\n        && _x <= this.cards[i].pos.x + CARD_DIMS.x\n        && _y >= this.cards[i].pos.y\n        && _y <= this.cards[i].pos.y + CARD_DIMS.y\n      ) {\n        this.cards.push(this.cards.splice(i, 1)[0]) // move card to end of array so drawn on top\n        \n        return this.cards[this.cards.length - 1]\n      }\n    }\n\n    return null\n  }\n\n  alignCards() {\n    this.stacks.table.forEach((_stack, _count) => {\n      _stack.forEach((_card, _cardCount) => {\n        _card.pos.x = CARD_X_MARGIN + _count * (CARD_DIMS.x + CARD_X_MARGIN)\n        _card.pos.y = 200 + 1.5 * CARD_DIMS.y + 0.3 * CARD_DIMS.y * _cardCount\n        _card.zindex = _cardCount\n      })\n    })\n\n    this.stacks.foundations.forEach((_stack, _count) => {\n      _stack.forEach((_card, _cardCount) => {\n        _card.pos.x = CARD_X_MARGIN + _count * (CARD_DIMS.x + CARD_X_MARGIN)\n        _card.pos.y = 200\n        _card.zindex = _cardCount\n      })\n    })\n\n    this.stacks.opencells.forEach((_opencell, _count) => {\n      if (_opencell !== null) {\n        _opencell.pos.x = CARD_X_MARGIN + (_count + 4) * (CARD_DIMS.x + CARD_X_MARGIN)\n        _opencell.pos.y = 200\n        _opencell.zindex = 0\n      }\n    })\n\n    this.sortCardZindex()\n  }\n\n  sortCardZindex() {\n    this.cards.sort((a, b) => a.zindex - b.zindex)\n  }\n\n  findInStacks(_card) {\n    for (let i = 0; i < this.stacks.table.length; i++) {\n      for (let j = 0; j < this.stacks.table[i].length; j++) {\n        if (_card === this.stacks.table[i][j]) {\n          if (j === this.stacks.table[i].length - 1) return i\n          else return -1\n        }\n      }\n    }\n\n    for (let i = 0; i < this.stacks.opencells.length; i++) {\n      if (_card === this.stacks.opencells[i]) return i + 12\n    }\n\n    return -1\n  }\n\n  moveCard(_card, _dest) {\n    let col = this.findInStacks(_card)\n\n    console.log(col)\n\n    let validMove = true\n    if (_dest === -1) validMove = false\n    else if (col === -1) validMove = false\n    else if (col === _dest) validMove = false\n    else if (!this.checkValidDest(_card, _dest)) validMove = false\n    \n    if (validMove) {\n      // do this first as col is modified later\n      this.undoStack.push({card:_card, from: col, to: _dest})\n      this.moves++\n\n      if (col < 8) {\n        if (_dest < 8) this.stacks.table[_dest].push(this.stacks.table[col].pop())\n        else if(_dest < 12) this.stacks.foundations[_dest - 8].push(this.stacks.table[col].pop())\n        else if(_dest < 16) this.stacks.opencells[_dest - 12] = this.stacks.table[col].pop()\n      } else {\n        col -= 12 // if undo saving done after here will cause problems\n        if (_dest < 8) {\n          this.stacks.table[_dest].push(this.stacks.opencells[col])\n          this.stacks.opencells[col] = null\n        } else if(_dest < 12) {\n          this.stacks.foundations[_dest - 8].push(this.stacks.opencells[col])\n          this.stacks.opencells[col] = null\n        }\n        else if(_dest < 16) {\n          this.stacks.opencells[_dest - 12] = this.stacks.opencells[col]\n          this.stacks.opencells[col] = null\n        }\n      }\n\n    }\n\n    this.alignCards()\n  }\n\n  undo() {\n    if (this.undoStack.length > 0) {\n      let action = this.undoStack.pop()\n      \n      // Note: to and from reversed as undoing\n      if (action.from < 8) {\n        if (action.to < 8) {\n          this.stacks.table[action.from].push(this.stacks.table[action.to].pop())\n        } else if (action.to < 12) {\n          this.stacks.table[action.from].push(this.stacks.foundations[action.to - 8].pop())          \n        } else {\n          this.stacks.table[action.from].push(this.stacks.opencells[action.to - 12])\n          this.stacks.opencells[action.to - 12] = null\n        }\n      } else if (action.from < 12) {\n        if (action.to < 8) {\n          this.stacks.opencells[action.from - 8].push(this.stacks.table[action.to].pop())\n        } else if (action.to < 12) {\n          this.stacks.opencells[action.from - 8].push(this.stacks.foundations[action.to - 8].pop())          \n        } else {\n          this.stacks.opencells[action.from - 8].push(this.stacks.opencells[action.to - 12])\n          this.stacks.opencells[action.to - 12] = null\n        }\n      } else {\n        if (action.to < 8) {\n          this.stacks.opencells[action.from - 12] = this.stacks.table[action.to].pop()\n        } else if (action.to < 12) {\n          this.stacks.opencells[action.from - 12] = this.stacks.foundations[action.to - 8].pop()\n        } else {\n          this.stacks.opencells[action.from - 12] = this.stacks.opencells[action.to - 12]\n          this.stacks.opencells[action.to - 12] = null\n        }\n      }\n\n      this.moves++\n      this.undos++\n      this.alignCards()\n    }\n  }\n\n  checkValidDest(_card, _dest) {\n    let out = false\n\n    if (_dest < 8) {\n      if (this.stacks.table[_dest].length === 0) out = true\n      else {\n        let lastcard = this.stacks.table[_dest].slice(-1)[0]\n        if (lastcard.color !== _card.color && (lastcard.num - 1) === _card.num) out = true\n      }\n    } else if (_dest < 12) {\n      if (this.stacks.foundations[_dest - 8].length === 0) {\n        if (_card.num === 1) out = true\n      } else {\n        let lastcard = this.stacks.foundations[_dest - 8].slice(-1)[0]\n        if (lastcard.suit === _card.suit && (lastcard.num + 1) === _card.num) out = true\n      }\n    } else if (_dest < 16) {\n      if (this.stacks.opencells[_dest - 12] === null) out = true\n    }\n\n    return out\n  }\n\n  getStackFromMouse(_x, _y) {\n    let index = Math.floor((_x - CARD_X_MARGIN) / CARD_DIMS.x)\n    let out = -1\n    if (_x - CARD_DIMS.x * index <= CARD_DIMS.x) out = index\n    if (out !== -1 && _y < 200 + CARD_DIMS.y * 1.5) out += 8\n    return out\n  }\n}"],
  "mappings": "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",
  "names": []
}
